#+TITLE: Emacs init.org
#+AUTHOR: haruki7049
#+STARTUP: overview

This =init.org= is checked under emacs-29.4

When you write code in code block:
#+begin_quote
    1. =C-c ‘= とする
    2. ウィンドウが分割され、当該ブロックだけを抜き出したバッファが表示される
    3. このバッファは、emacs-lispモードなので、このバッファがすべてと思って、ここでコードをきれいに書く
    4. なんなら、テストもここですればいい
    5. コードが決まったら、再び =C-c ‘=

       -- http://blog.lambda-consulting.jp/2015/11/20/article/
#+end_quote

* leaf.el installation

#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
#+end_src

* Emacs core
** enable-local-variables
https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html
#+begin_src emacs-lisp
  (leaf emacs
    :ensure t
    :config
    (setopt enable-local-variables nil))
#+end_src

** custom.el
https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html\\
https://qiita.com/javacommons/items/87bebffc4183a48cf070
#+begin_src emacs-lisp
  (leaf emacs
    :ensure t
    :config
    (setopt custom-file "~/.config/emacs/custom.el")
    (condition-case nil
        (load custom-file)
      (error nil)))
#+end_src

** Indentation

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt indent-tabs-mode nil)
    (setopt tab-width 2))
#+end_src

** Font

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (when (member "UDEV Gothic NF" (font-family-list))
      (set-face-attribute 'default nil
                          :family "UDEV Gothic NF"
                          :height (if (<= (display-pixel-width) 1920) 108 130))))
#+end_src

** History

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt savehist-mode t))
#+end_src

** Backup files

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt make-backup-files nil)
    (setopt auto-save-default nil)
    (setopt create-lockfiles nil))
#+end_src

** Menu bar, Tool bar & Scroll bar

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt menu-bar-mode nil)
    (setopt tool-bar-mode nil)
    (setopt scroll-bar-mode nil))
#+end_src

** Show line numbers

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt global-display-line-numbers-mode t))
#+end_src

** Hide startup messege

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt inhibit-startup-message t))
#+end_src

** Newsticker

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (setopt newsticker-url-list
            '(("deno" "https://deno.com/feed")
              ("this week in rust" "https://this-week-in-rust.org/rss.xml")
              ("Rust-lang Main blog" "https://blog.rust-lang.org/feed.xml")
              ("Rust-lang 'Inside rust' blog" "https://blog.rust-lang.org/inside-rust/feed.xml")
              ("zenn.dev - webrtc" "https://zenn.dev/topics/webrtc/feed")
              ("zenn.dev - Rust" "https://zenn.dev/topics/rust/feed")
              ("zenn.dev - FreeBSD" "https://zenn.dev/topics/freebsd/feed")
              ("zenn.dev - TypeScript" "https://zenn.dev/topics/typescript/feed")
              ("zenn.dev - Deno" "https://zenn.dev/topics/deno/feed")
              ("zenn.dev - React" "https://zenn.dev/topics/react/feed"))))
#+end_src

** Whitespace

#+begin_src emacs-lisp
  (leaf emacs
    :leaf-defer t
    :ensure t
    :config
    (add-hook 'write-file-hooks 'delete-trailing-whitespace))
#+end_src

* language-modes

#+begin_src emacs-lisp
  (leaf rust-mode
    :leaf-defer t
    :ensure t
    :mode
    ("\\.rs\\'" . rust-mode))

  (leaf zig-mode
    :leaf-defer t
    :ensure t
    :mode
    ("\\.zig\\'" . zig-mode))

  (leaf nix-mode
    :leaf-defer t
    :ensure t
    :mode
    ("\\.nix\\'" . nix-mode))
#+end_src

** Org-mode

Enable org-mode

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :mode
    ("\\.org\\'" . org-mode))

  (leaf org
    :leaf-defer t
    :ensure t
    :after
    (org-tempo)
    :config
    (org-indent-mode))

  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (require 'org-tempo))
#+end_src

Set Org directory. The directory was set as =~/Notes=
Run =git clone https://github.com/haruki7049/Notes.git=

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (setopt org-agenda-files '("~/Notes" "~/Notes/diary")))
#+end_src

Don't use the emacs-standard holidays on calendar

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (setopt calendar-holidays nil))
#+end_src

Use underline in agenda

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (setopt hl-line-face 'underline)
    :hook
    (org-agenda-mode hl-line-mode))
#+end_src

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (setopt org-enforce-todo-dependencies t))
#+end_src

Org-mode todo keywords

#+begin_src emacs-lisp
  (leaf org
    :leaf-defer t
    :ensure t
    :config
    (setopt org-todo-keywords
            '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c@)"))))
#+end_src

* IME

#+begin_src emacs-lisp
  (leaf ddskk
    :leaf-defer t
    :ensure t
    :bind
    ("C-x C-j" . skk-mode))
#+end_src

* Theme

#+begin_src emacs-lisp
  (leaf dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+end_src

* UI

#+begin_src emacs-lisp
  (leaf vertico
    :leaf-defer t
    :ensure t
    :config
    (vertico-mode))
#+end_src

* Tools
** direnv

#+begin_src emacs-lisp
  (leaf envrc
    :leaf-defer t
    :ensure t
    :hook
    (after-init . envrc-global-mode))
#+end_src

** Git

#+begin_src emacs-lisp
  (leaf magit
    :leaf-defer t
    :ensure t)
#+end_src

** Mail client

#+begin_src emacs-lisp
  ;;(leaf mu4e
  ;;  :leaf-defer t
  ;;  :ensure t)
#+end_src
