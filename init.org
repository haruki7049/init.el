#+TITLE: Emacs init.org
#+AUTHOR: haruki7049
#+STARTUP: overview

When you write code in code block:
#+begin_quote
    1. =C-c ‘= とする
    2. ウィンドウが分割され、当該ブロックだけを抜き出したバッファが表示される
    3. このバッファは、emacs-lispモードなので、このバッファがすべてと思って、ここでコードをきれいに書く
    4. なんなら、テストもここですればいい
    5. コードが決まったら、再び =C-c ‘=

       -- http://blog.lambda-consulting.jp/2015/11/20/article/
#+end_quote

* early-init
** enable-local-variables
https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html
#+begin_src emacs-lisp
  (setq-default enable-local-variables nil)
#+end_src

** custom.el
https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html\\
https://qiita.com/javacommons/items/87bebffc4183a48cf070
#+begin_src emacs-lisp
  (setq custom-file "~/.config/emacs/custom.el")
  (condition-case nil
      (load custom-file)
    (error nil))
#+end_src

* use-package
** package-archives
#+begin_src emacs-lisp
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

** Initializing packages
*** language-modes
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :mode
    ("\\.rs\\'" . rust-mode))

  (use-package zig-mode
    :ensure t
    :mode
    ("\\.zig\\'" . zig-mode))

  (use-package nix-mode
    :ensure t
    :mode
    ("\\.nix\\'" . nix-mode))
#+end_src

*** IME

#+begin_src emacs-lisp
  (use-package ddskk
    :ensure t
    :bind
    ("C-x C-j" . skk-mode))
#+end_src

*** Theme

#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+end_src

*** direnv

#+begin_src emacs-lisp
  (use-package envrc
    :ensure t
    :hook
    (after-init . envrc-global-mode))
#+end_src

*** UI

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    (vertico-mode))
#+end_src

* Other settings
** Indentation

#+begin_src emacs-lisp
  (setopt indent-tabs-mode nil)
  (setopt tab-width 2)
#+end_src

** Font

#+begin_src emacs-lisp
  ;; FONT SETTING
  ;;(set-face-attribute 'default nil
  ;;                    :family "UDEV Gothic NF" ;;This point has a font dependency
  ;;                    :height 140)
#+end_src

** History

#+begin_src emacs-lisp
  (savehist-mode)
#+end_src

** Backup files

#+begin_src emacs-lisp
  (setopt make-backup-files nil)
  (setopt auto-save-default nil)
  (setopt create-lockfiles nil)
#+end_src

** Menu bar & Tool bar

#+begin_src emacs-lisp
  (menu-bar-mode nil)
  (tool-bar-mode nil)
#+end_src

** Show line numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
#+end_src

** Hide startup messege

#+begin_src emacs-lisp
  (setopt inhibit-startup-message t)
#+end_src

** Newsticker

#+begin_src emacs-lisp
  (setopt newsticker-url-list
          '(("deno" "https://deno.com/feed")
            ("this week in rust" "https://this-week-in-rust.org/rss.xml")
            ("Rust-lang Main blog" "https://blog.rust-lang.org/feed.xml")
            ("Rust-lang 'Inside rust' blog" "https://blog.rust-lang.org/inside-rust/feed.xml")
            ("zenn.dev - webrtc" "https://zenn.dev/topics/webrtc/feed")
            ("zenn.dev - Rust" "https://zenn.dev/topics/rust/feed")
            ("zenn.dev - FreeBSD" "https://zenn.dev/topics/freebsd/feed")
            ("zenn.dev - TypeScript" "https://zenn.dev/topics/typescript/feed")
            ("zenn.dev - Deno" "https://zenn.dev/topics/deno/feed")
            ("zenn.dev - React" "https://zenn.dev/topics/react/feed")))
#+end_src

** Whitespace

#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+end_src

** org-mode

#+begin_src emacs-lisp
  (require 'org-tempo)
  (org-indent-mode)
#+end_src
